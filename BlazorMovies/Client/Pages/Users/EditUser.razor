@page "/users/edit/{userId}"
@inject IUsersRepository usersRepository
@inject IDisplayMessage displayMessage

<h3>EditUser</h3>

<div class="form-inline">
    <select class="form-control mb-2 mr-sm-2" @bind="SelectedRole">
        <option value="0">--Select a role--</option>
        @foreach (var role in Roles)
        {
            <option value="@role.RoleName">@role.RoleName</option>
        }
    </select>

    <button class="btn btn-info mb-2 mr-sm-2" @onclick="AssignRole">Assign Role</button>
    <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoveRole">Remove Role</button>
</div>

@code {
    [Parameter] public string UserId { get; set; }
    private List<RoleDTO> Roles = new List<RoleDTO>();
    private string SelectedRole = "0";

    protected async override Task OnInitializedAsync()
    {
        Roles = await usersRepository.GetRoles();
        await base.OnInitializedAsync();
    }

    private async Task AssignRole()
    {
        if (SelectedRole == "0")
        {
            await displayMessage.DisplayErrorMessage("You must select a role");
        }
        await usersRepository.AssignRole(new EditRoleDTO() { RoleName = SelectedRole, UserId = UserId });
        await displayMessage.DisplaySuccessMessage("Role assigned Successfully.");
    }

    private async Task RemoveRole()
    {
        if (SelectedRole == "0")
        {
            await displayMessage.DisplayErrorMessage("You must select a role");
        }
        await usersRepository.RemoveRole(new EditRoleDTO() { RoleName = SelectedRole, UserId = UserId });
        await displayMessage.DisplaySuccessMessage("Role removed Successfully.");
    }
}
